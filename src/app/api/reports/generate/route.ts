import { NextResponse } from 'next/server';
import { sanityClient } from '@/lib/sanity/client';
import { groq } from 'next-sanity';

// Endpoint de API para gera√ß√£o ass√≠ncrona de relat√≥rios
export async function POST(request: Request) {
  try {
    const { leadId } = await request.json();

    if (!leadId) {
      return NextResponse.json(
        { success: false, message: 'ID do lead n√£o fornecido' }, 
        { status: 400 }
      );
    }

    console.log(`üöÄ Iniciando processamento ass√≠ncrono de relat√≥rio para lead: ${leadId}`);

    // Iniciamos o processo de gera√ß√£o em background e n√£o esperamos sua conclus√£o
    // para responder rapidamente √† requisi√ß√£o
    generateReportAsync(leadId).catch(error => {
      console.error(`‚ùå Erro na gera√ß√£o ass√≠ncrona para lead ${leadId}:`, error);
    });
    
    // Retornamos imediatamente com uma resposta de sucesso
    return NextResponse.json({
      success: true,
      message: 'Gera√ß√£o de relat√≥rio iniciada com sucesso',
      leadId
    });
  } catch (error) {
    console.error('‚ùå Erro ao processar requisi√ß√£o de gera√ß√£o de relat√≥rio:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: 'Erro ao iniciar gera√ß√£o de relat√≥rio',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      }, 
      { status: 500 }
    );
  }
}

// Fun√ß√£o para atualizar o status do relat√≥rio no Sanity
async function updateReportStatus(leadId: string, status: string, message: string, attemptIncrement = 0) {
  const now = new Date().toISOString();
  
  // Busca o n√∫mero atual de tentativas (se existir)
  const query = groq`*[_type == "lead" && _id == $leadId][0].reportStatus.attempts`;
  let currentAttempts = 0;
  
  try {
    const result = await sanityClient.fetch(query, { leadId });
    if (typeof result === 'number') {
      currentAttempts = result;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel buscar o n√∫mero atual de tentativas');
  }

  // Calcula o novo n√∫mero de tentativas
  const attempts = currentAttempts + attemptIncrement;
  
  return sanityClient
    .patch(leadId)
    .set({
      reportStatus: {
        status,
        message,
        updatedAt: now,
        attempts
      },
      updatedAt: now
    })
    .commit();
}

// Fun√ß√£o ass√≠ncrona para gera√ß√£o do relat√≥rio
// Esta fun√ß√£o √© executada em background e n√£o bloqueia a resposta da API
async function generateReportAsync(leadId: string) {
  try {
    console.log(`üöÄ generateReportAsync: Iniciando gera√ß√£o para lead: ${leadId}`);
    console.log('üîë Verificando token Sanity:', !!process.env.SANITY_API_TOKEN ? 'Dispon√≠vel' : 'N√£o dispon√≠vel');

    // 1. Atualizar o status para "processando"
    await updateReportStatus(
      leadId, 
      'processing', 
      'Iniciando a gera√ß√£o do relat√≥rio...'
    );
    console.log(`‚úÖ Status atualizado para "processing" para lead ${leadId}`);

    // 2. Buscar dados do lead
    let lead;
    try {
      console.log(`üîç Buscando dados do lead ${leadId}...`);
      lead = await sanityClient.fetch(
        groq`*[_type == "lead" && _id == $leadId][0]`,
        { leadId }
      );
      
      console.log(`üîç Dados do lead encontrados:`, lead ? 'Sim' : 'N√£o');

      if (!lead) {
        console.log(`‚ùå Lead ${leadId} n√£o encontrado no banco de dados`);
        await updateReportStatus(
          leadId, 
          'failed', 
          'Lead n√£o encontrado no banco de dados'
        );
        return;
      }

      // 3. Verificar se j√° existe um relat√≥rio para este lead
      if (lead.report) {
        console.log(`‚ÑπÔ∏è Lead ${leadId} j√° possui um relat√≥rio associado:`, lead.report);
        await updateReportStatus(
          leadId, 
          'completed', 
          'Relat√≥rio j√° existente recuperado com sucesso'
        );
        return;
      }
    } catch (fetchError) {
      console.error(`‚ùå Erro ao buscar dados do lead: ${fetchError}`);
      await updateReportStatus(
        leadId, 
        'failed', 
        `Erro ao buscar dados do lead: ${fetchError instanceof Error ? fetchError.message : 'Erro desconhecido'}`
      );
      return;
    }

    // 4. Iniciar gera√ß√£o - Com at√© 3 tentativas
    const MAX_ATTEMPTS = 3;
    console.log(`üîÑ Iniciando gera√ß√£o do relat√≥rio em at√© ${MAX_ATTEMPTS} tentativas`);
    let attempt = 0;
    let success = false;
    let lastError = null;

    while (attempt < MAX_ATTEMPTS && !success) {
      attempt++;
      
      try {
        await updateReportStatus(
          leadId, 
          'processing', 
          `Gerando relat√≥rio (tentativa ${attempt}/${MAX_ATTEMPTS})...`,
          1 // Incrementar o contador de tentativas
        );

        // 5. Gerar o relat√≥rio
        console.log(`üîÑ Tentativa ${attempt}/${MAX_ATTEMPTS} de gerar relat√≥rio para o lead ${leadId}`);
        
        // TODO: Substituir esta se√ß√£o com a chamada real para sua fun√ß√£o de gera√ß√£o de relat√≥rio
        // Simula√ß√£o de gera√ß√£o de relat√≥rio (remover e substituir pelo c√≥digo real)
        console.log('‚è≥ Simulando processamento de 3 segundos...');
        await new Promise(resolve => setTimeout(resolve, 3000)); // Simula√ß√£o de processamento
        console.log('‚úÖ Processamento simulado conclu√≠do');
        
        const reportData = {
          reportTitle: `Relat√≥rio para ${lead.companyName || lead.name}`,
          leadId: lead._id,
          reportId: `report-${lead._id}`,
          // Outros campos do relat√≥rio
        };
        
        // Criar o relat√≥rio no Sanity
        console.log('üìù Criando documento de relat√≥rio no Sanity...');
        const report = await sanityClient.create({
          _type: 'report',
          reportTitle: reportData.reportTitle,
          lead: { _type: 'reference', _ref: leadId },
          slug: {
            _type: 'slug',
            current: reportData.reportId
          },
          // Substitua por dados reais
          reportContent: [
            {
              _type: 'block',
              children: [
                {
                  _type: 'span',
                  text: 'Conte√∫do de exemplo do relat√≥rio.',
                  marks: []
                }
              ],
              style: 'normal'
            }
          ],
          createdAt: new Date().toISOString(),
          views: 0
        });
        console.log('‚úÖ Documento de relat√≥rio criado com ID:', report._id);

        // Associar o relat√≥rio ao lead
        console.log('üîÑ Associando relat√≥rio ao lead...');
        await sanityClient
          .patch(leadId)
          .set({
            report: { _type: 'reference', _ref: report._id },
            reportGenerated: true,
            updatedAt: new Date().toISOString()
          })
          .commit();
        console.log('‚úÖ Relat√≥rio associado ao lead com sucesso');

        // Atualizar status final
        await updateReportStatus(
          leadId, 
          'completed', 
          'Relat√≥rio gerado com sucesso'
        );

        console.log(`‚úÖ Relat√≥rio gerado e associado com sucesso para o lead ${leadId}`);
        success = true;
        
      } catch (error) {
        console.error(`‚ùå Erro na tentativa ${attempt}/${MAX_ATTEMPTS}:`, error);
        lastError = error;
        
        // Esperar antes da pr√≥xima tentativa (exponential backoff)
        if (attempt < MAX_ATTEMPTS) {
          const backoffTime = Math.min(1000 * 2 ** attempt, 10000); // M√°ximo de 10 segundos
          console.log(`‚è±Ô∏è Aguardando ${backoffTime}ms antes da pr√≥xima tentativa`);
          await new Promise(resolve => setTimeout(resolve, backoffTime));
        }
      }
    }

    // Se todas as tentativas falharam
    if (!success) {
      console.error(`‚ùå Todas as ${MAX_ATTEMPTS} tentativas falharam para o lead ${leadId}`);
      
      // Atualizar status para falha
      await updateReportStatus(
        leadId, 
        'failed', 
        `Falha ao gerar relat√≥rio ap√≥s ${MAX_ATTEMPTS} tentativas. Equipe notificada.`
      );
      
      // TODO: Implementar notifica√ß√£o para equipe sobre falha na gera√ß√£o
    }
    
  } catch (error) {
    console.error(`‚ùå Erro fatal no processo de gera√ß√£o ass√≠ncrona para lead ${leadId}:`, error);
    
    try {
      await updateReportStatus(
        leadId, 
        'failed', 
        'Erro interno no servidor durante a gera√ß√£o do relat√≥rio'
      );
    } catch (statusError) {
      console.error('‚ùå N√£o foi poss√≠vel atualizar o status para falha:', statusError);
    }
  }
} 