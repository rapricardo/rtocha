import { NextRequest, NextResponse } from 'next/server';
import { updateLead } from '@/lib/sanity/mutations';
import { generateReportId } from '@/lib/utils/reportGenerator';

export async function POST(request: NextRequest) {
  try {
    console.log('üìù API /request-report: Processando solicita√ß√£o...');
    const { email: userEmail, leadId } = await request.json();
    
    // Valida√ß√£o b√°sica
    if (!userEmail || !leadId) {
      console.log('‚ùå Valida√ß√£o falhou: email ou leadId ausente');
      return NextResponse.json(
        { error: 'Email e leadId s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }
    
    // Verificar se √© um ID simulado
    if (leadId.startsWith('sim_')) {
      console.log('‚ö†Ô∏è Detectado ID simulado. Usando modo de simula√ß√£o.');
      
      // Simular a solicita√ß√£o do relat√≥rio
      console.log('üìù Simulando solicita√ß√£o de relat√≥rio para o email:', userEmail);
      
      // Gerar um ID de relat√≥rio simulado 
      const simulatedReportId = generateReportId();
      const reportUrl = `/relatorios/${simulatedReportId}`;
      
      console.log('‚úÖ Solicita√ß√£o de relat√≥rio simulada com sucesso');
      return NextResponse.json({ 
        success: true,
        message: "MODO DE SIMULA√á√ÉO: Seu relat√≥rio est√° dispon√≠vel para visualiza√ß√£o",
        simulatedMode: true,
        reportId: simulatedReportId,
        reportUrl: reportUrl
      });
    }
    
    // Verificar se o token est√° configurado
    if (!process.env.SANITY_API_TOKEN) {
      console.log('‚ö†Ô∏è SANITY_API_TOKEN n√£o est√° configurado. Usando modo de simula√ß√£o.');
      
      // Gerar um ID de relat√≥rio simulado 
      const simulatedReportId = generateReportId();
      const reportUrl = `/relatorios/${simulatedReportId}`;
      
      console.log('‚úÖ Solicita√ß√£o de relat√≥rio simulada com sucesso');
      return NextResponse.json({ 
        success: true,
        message: "MODO DE SIMULA√á√ÉO: Seu relat√≥rio est√° dispon√≠vel para visualiza√ß√£o",
        simulatedMode: true,
        reportId: simulatedReportId,
        reportUrl: reportUrl
      });
    }
    
    // C√≥digo normal para quando o token est√° configurado
    // Atualizar status do lead
    console.log(`üìù Atualizando status do lead: ${leadId}`);
    await updateLead(leadId, {
      status: 'qualified',
      reportRequested: true,
      reportRequestedAt: new Date().toISOString()
    });
    
    // Iniciar gera√ß√£o do relat√≥rio e obter a URL
    console.log('üìù Iniciando gera√ß√£o do relat√≥rio e obtendo URL');
    const reportData = await generateReportForLead(leadId);
    
    console.log('‚úÖ Solicita√ß√£o de relat√≥rio processada com sucesso');
    return NextResponse.json({ 
      success: true,
      message: "Seu relat√≥rio est√° pronto para visualiza√ß√£o",
      reportId: reportData.reportId,
      reportUrl: reportData.reportUrl
    });
  } catch (error) {
    console.error('‚ùå Erro ao solicitar relat√≥rio:', error);
    
    // Mesmo em caso de erro, fornecer uma URL simulada para que o usu√°rio tenha alguma experi√™ncia
    const fallbackReportId = generateReportId();
    
    return NextResponse.json(
      { 
        success: true,
        message: "Ocorreu um erro, mas voc√™ ainda pode acessar um relat√≥rio de exemplo",
        reportId: fallbackReportId,
        reportUrl: `/relatorios/${fallbackReportId}`
      },
      { status: 200 }
    );
  }
}

// Fun√ß√£o para gerar o relat√≥rio para um lead
async function generateReportForLead(leadId: string) {
  try {
    console.log(`üìù Gerando relat√≥rio para lead ${leadId}`);
    
    // Chamar a API de gera√ß√£o de relat√≥rio
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/audit-quiz/generate-report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ leadId }),
    });
    
    if (!response.ok) {
      throw new Error(`Erro ao gerar relat√≥rio: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('‚úÖ Relat√≥rio gerado com sucesso:', data);
    
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio:', error);
    throw error;
  }
}