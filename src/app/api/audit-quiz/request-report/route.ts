import { NextRequest, NextResponse } from 'next/server';
import { updateLead } from '@/lib/sanity/mutations';
import { generateReportId } from '@/lib/utils/reportGenerator';
import { v4 as uuidv4 } from 'uuid';
import { reportStatusService, ReportStatus } from '@/lib/services/reportStatus';
import { sanityClient } from '@/lib/sanity/client'; // Adicionado para buscar relat√≥rios existentes

export async function POST(request: NextRequest) {
  try {
    console.log('üìù API /request-report: Processando solicita√ß√£o...');
    const { email: userEmail, leadId } = await request.json();
    
    // Valida√ß√£o b√°sica
    if (!userEmail || !leadId) {
      console.log('‚ùå Valida√ß√£o falhou: email ou leadId ausente');
      return NextResponse.json(
        { error: 'Email e leadId s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }
    
    // Gerar ID √∫nico para esta solicita√ß√£o
    const reportRequestId = uuidv4();
    console.log('üìù ID de solicita√ß√£o gerado:', reportRequestId);
    
    // Verificar se √© um ID simulado
    if (leadId.startsWith('sim_')) {
      console.log('‚ö†Ô∏è Detectado ID simulado. Usando modo de simula√ß√£o.');
      
      // Simular a solicita√ß√£o do relat√≥rio
      console.log('üìù Simulando solicita√ß√£o de relat√≥rio para o email:', userEmail);
      
      // Gerar um ID de relat√≥rio simulado 
      const simulatedReportId = generateReportId();
      const reportUrl = `/relatorios/${simulatedReportId}`;
      
      console.log('‚úÖ Solicita√ß√£o de relat√≥rio simulada com sucesso');
      return NextResponse.json({ 
        success: true,
        message: "MODO DE SIMULA√á√ÉO: Seu relat√≥rio est√° dispon√≠vel para visualiza√ß√£o",
        simulatedMode: true,
        reportId: simulatedReportId,
        reportUrl: reportUrl,
        reportRequestId: null // N√£o precisamos de polling em modo de simula√ß√£o
      });
    }
    
    // Verificar se o token est√° configurado
    if (!process.env.SANITY_API_TOKEN) {
      console.log('‚ö†Ô∏è SANITY_API_TOKEN n√£o est√° configurado. Usando modo de simula√ß√£o.');
      
      // Gerar um ID de relat√≥rio simulado 
      const simulatedReportId = generateReportId();
      const reportUrl = `/relatorios/${simulatedReportId}`;
      
      console.log('‚úÖ Solicita√ß√£o de relat√≥rio simulada com sucesso');
      return NextResponse.json({ 
        success: true,
        message: "MODO DE SIMULA√á√ÉO: Seu relat√≥rio est√° dispon√≠vel para visualiza√ß√£o",
        simulatedMode: true,
        reportId: simulatedReportId,
        reportUrl: reportUrl,
        reportRequestId: null // N√£o precisamos de polling em modo de simula√ß√£o
      });
    }
    
    // ADICIONADO: Verificar se j√° existe um relat√≥rio para este lead
    console.log(`üìù Verificando se j√° existe relat√≥rio para lead: ${leadId}`);
    try {
      const existingReport = await sanityClient.fetch(`
        *[_type == "report" && lead._ref == $leadId][0]{
          _id,
          "slug": slug.current
        }
      `, { leadId });
      
      if (existingReport) {
        console.log(`‚úÖ Relat√≥rio existente encontrado: ${existingReport._id}`);
        const reportUrl = `/relatorios/${existingReport.slug}`;
        
        return NextResponse.json({
          success: true,
          message: "Relat√≥rio j√° existente recuperado com sucesso",
          reportUrl: reportUrl,
          reportExists: true
        });
      }
    } catch (fetchError) {
      console.log('‚ö†Ô∏è Erro ao verificar relat√≥rio existente:', fetchError);
      // Continuar normalmente mesmo se falhar a verifica√ß√£o
    }
    
    // C√≥digo normal para quando o token est√° configurado
    // Atualizar status do lead
    console.log(`üìù Atualizando status do lead: ${leadId}`);
    await updateLead(leadId, {
      status: 'qualified',
      reportRequested: true,
      reportRequestedAt: new Date().toISOString()
    });
    
    // Registrar o status inicial do relat√≥rio
    const initialStatus: ReportStatus = {
      status: 'processing',
      startTime: new Date().toISOString(),
      leadId: leadId
    };
    
    reportStatusService.set(reportRequestId, initialStatus);
    
    // Debug: Listar todos os status para depura√ß√£o
    const allStatuses = reportStatusService.debug();
    console.log(`üìä Status atuais (ap√≥s adi√ß√£o): ${allStatuses.length}`);
    allStatuses.forEach(item => {
      console.log(`- ${item.requestId}: ${item.status.status}`);
    });
    
    // Iniciar a gera√ß√£o do relat√≥rio de forma ass√≠ncrona
    setTimeout(() => {
      generateReportAsync(reportRequestId, leadId)
        .catch(error => console.error('Erro na gera√ß√£o ass√≠ncrona:', error));
    }, 100);
    
    console.log('‚úÖ Solicita√ß√£o de relat√≥rio iniciada com sucesso, retornando requestId:', reportRequestId);
    return NextResponse.json({ 
      success: true,
      message: "Seu relat√≥rio est√° sendo gerado",
      reportRequestId: reportRequestId
    });
  } catch (error) {
    console.error('‚ùå Erro ao solicitar relat√≥rio:', error);
    
    // Mesmo em caso de erro, fornecer uma URL simulada para que o usu√°rio tenha alguma experi√™ncia
    const fallbackReportId = generateReportId();
    
    return NextResponse.json(
      { 
        success: true,
        message: "Ocorreu um erro, mas voc√™ ainda pode acessar um relat√≥rio de exemplo",
        reportId: fallbackReportId,
        reportUrl: `/relatorios/${fallbackReportId}`,
        reportRequestId: null // N√£o precisamos de polling em modo de simula√ß√£o
      },
      { status: 200 }
    );
  }
}

// Fun√ß√£o ass√≠ncrona para gerar o relat√≥rio em background
async function generateReportAsync(reportRequestId: string, leadId: string) {
  try {
    console.log(`üìù Gerando relat√≥rio ass√≠ncrono para lead ${leadId} (requestId: ${reportRequestId})`);
    
    // Chamar a API de gera√ß√£o de relat√≥rio
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3001';
    const response = await fetch(`${baseUrl}/api/audit-quiz/generate-report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ leadId }),
    });
    
    if (!response.ok) {
      throw new Error(`Erro ao gerar relat√≥rio: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('‚úÖ Relat√≥rio gerado com sucesso:', data);
    
    // Atualizar o status do relat√≥rio para 'completed'
    reportStatusService.update(reportRequestId, {
      status: 'completed',
      completedAt: new Date().toISOString(),
      reportUrl: `/relatorios/${data.reportSlug || data.reportId}`
    });
    
    // Debug: Verificar status ap√≥s atualiza√ß√£o
    const updatedStatus = reportStatusService.get(reportRequestId);
    console.log(`üìä Status atualizado para ${reportRequestId}:`, updatedStatus);
    
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio ass√≠ncrono:', error);
    
    // Atualizar o status do relat√≥rio para 'failed'
    reportStatusService.update(reportRequestId, {
      status: 'failed',
      completedAt: new Date().toISOString(),
      error: error instanceof Error ? error.message : 'Erro desconhecido ao gerar relat√≥rio'
    });
    
    throw error;
  }
}
