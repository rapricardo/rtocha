import { NextRequest, NextResponse } from 'next/server';
import { updateLead } from '@/lib/sanity/mutations';
import { generateReportId } from '@/lib/utils/reportGenerator';
// import { v4 as uuidv4 } from 'uuid'; // Removido - n√£o mais necess√°rio
// import { reportStatusService, ReportStatus } from '@/lib/services/reportStatus'; // Removido - n√£o mais necess√°rio
import { sanityClient } from '@/lib/sanity/client'; 
// import { generateReport } from '@/lib/services/reports/reportGenerator'; // Comentado - Gera√ß√£o √© iniciada por /api/reports/generate

export async function POST(request: NextRequest) {
  try {
    console.log('üìù API /request-report: Processando solicita√ß√£o...');
    const { email: userEmail, leadId } = await request.json();
    
    // Valida√ß√£o b√°sica
    if (!userEmail || !leadId) {
      console.log('‚ùå Valida√ß√£o falhou: email ou leadId ausente');
      return NextResponse.json(
        { error: 'Email e leadId s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }
    
    // Remover gera√ß√£o de ID de solicita√ß√£o - n√£o mais necess√°rio
    // const reportRequestId = uuidv4();
    // console.log('üìù ID de solicita√ß√£o gerado:', reportRequestId);
    
    // Verificar se √© um ID simulado
    if (leadId.startsWith('sim_')) {
      console.log('‚ö†Ô∏è Detectado ID simulado. Usando modo de simula√ß√£o.');
      
      // Simular a solicita√ß√£o do relat√≥rio
      console.log('üìù Simulando solicita√ß√£o de relat√≥rio para o email:', userEmail);
      
      // Gerar um ID de relat√≥rio simulado 
      const simulatedReportId = generateReportId();
      const reportUrl = `/relatorios/${simulatedReportId}`;
      
      console.log('‚úÖ Solicita√ß√£o de relat√≥rio simulada com sucesso');
      return NextResponse.json({ 
        success: true,
        message: "MODO DE SIMULA√á√ÉO: Seu relat√≥rio est√° dispon√≠vel para visualiza√ß√£o",
        simulatedMode: true,
        reportId: simulatedReportId,
        reportUrl: reportUrl,
        // reportRequestId: null // Removido
      });
    }

    // Verificar se o token est√° configurado
    if (!process.env.SANITY_API_TOKEN) {
      console.log('‚ö†Ô∏è SANITY_API_TOKEN n√£o est√° configurado. Usando modo de simula√ß√£o.');
      
      // Gerar um ID de relat√≥rio simulado 
      const simulatedReportId = generateReportId();
      const reportUrl = `/relatorios/${simulatedReportId}`;
      
      console.log('‚úÖ Solicita√ß√£o de relat√≥rio simulada com sucesso');
      return NextResponse.json({ 
        success: true,
        message: "MODO DE SIMULA√á√ÉO: Seu relat√≥rio est√° dispon√≠vel para visualiza√ß√£o",
        simulatedMode: true,
        reportId: simulatedReportId,
        reportUrl: reportUrl,
        // reportRequestId: null // Removido
      });
    }

    // ADICIONADO: Verificar se j√° existe um relat√≥rio para este lead
    console.log(`üìù Verificando se j√° existe relat√≥rio para lead: ${leadId}`);
    try {
      const existingReport = await sanityClient.fetch(`
        *[_type == "report" && lead._ref == $leadId][0]{
          _id,
          "slug": slug.current
        }
      `, { leadId });
      
      if (existingReport) {
        console.log(`‚úÖ Relat√≥rio existente encontrado: ${existingReport._id}`);
        const reportUrl = `/relatorios/${existingReport.slug}`;
        
        return NextResponse.json({
          success: true,
          message: "Relat√≥rio j√° existente recuperado com sucesso",
          reportUrl: reportUrl,
          reportExists: true
        });
      }
    } catch (fetchError) {
      console.log('‚ö†Ô∏è Erro ao verificar relat√≥rio existente:', fetchError);
      // Continuar normalmente mesmo se falhar a verifica√ß√£o
    }
    
    // C√≥digo normal para quando o token est√° configurado
    // Atualizar status do lead
    console.log(`üìù Atualizando status do lead: ${leadId}`);
    await updateLead(leadId, {
      status: 'qualified',
      reportRequested: true,
      reportRequestedAt: new Date().toISOString()
    });

    // Remover registro de status inicial em mem√≥ria - n√£o mais necess√°rio
    // const initialStatus: ReportStatus = { ... };
    // reportStatusService.set(reportRequestId, initialStatus);
    // Remover debug do servi√ßo em mem√≥ria
    // const allStatuses = reportStatusService.debug(); ...

    // A gera√ß√£o do relat√≥rio √© iniciada pela API /submit -> /generate
    // Esta API apenas marca a solicita√ß√£o no lead.
    console.log('‚úÖ Solicita√ß√£o de relat√≥rio marcada no lead com sucesso:', leadId);
    return NextResponse.json({
      success: true,
      message: "Solicita√ß√£o de relat√≥rio registrada. A gera√ß√£o j√° foi iniciada ou ocorrer√° em breve."
      // Remover reportRequestId da resposta
    });
  } catch (error) {
    // Ajustar resposta de erro - n√£o retornar URL simulada
    console.error('‚ùå Erro ao processar solicita√ß√£o de relat√≥rio:', error);

    return NextResponse.json(
      {
        success: false,
        error: 'Ocorreu um erro ao registrar sua solicita√ß√£o de relat√≥rio.',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
}
