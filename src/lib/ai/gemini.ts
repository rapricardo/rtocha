import { GoogleGenerativeAI } from "@google/generative-ai";

// Inicializa a API do Google com a chave de API
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY || '');

// Obt√©m o modelo Gemini 1.5 Flash (o modelo r√°pido)
const getModel = () => {
  return genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    generationConfig: {
      temperature: 0.4, // Valor mais baixo para maior determinismo
      topP: 0.8,
      topK: 40,
      maxOutputTokens: 8192, // Ajuste conforme necess√°rio
    }
  });
};

// Fun√ß√£o para gerar recomenda√ß√µes personalizadas
export async function generatePersonalizedRecommendations(leadData: any, services: any[]) {
  try {
    const model = getModel();
    
    // Formata as informa√ß√µes dos servi√ßos dispon√≠veis
    const formattedServices = services.map(s => 
      `Nome: ${s.name}\nDescri√ß√£o: ${s.shortDescription}\nProblemas resolvidos: ${(s.problemsSolved || []).join(', ')}\n`
    ).join('\n---\n');
    
    // Constr√≥i o prompt
    const prompt = `
    Voc√™ √© um especialista em automa√ß√£o para marketing e vendas. Com base nos dados deste lead, recomende os 3 melhores servi√ßos e personalize as descri√ß√µes.
    
    ## DADOS DO LEAD:
    - Nome: ${leadData.name}
    - Empresa: ${leadData.companyName}
    - Cargo: ${leadData.jobTitle || 'N√£o informado'}
    - Site da empresa: ${leadData.companySite || 'N√£o informado'}
    - Tamanho da empresa: ${leadData.companySize}
    - Estrutura de marketing: ${leadData.marketingStructure || 'N√£o informado'}
    - Tamanho da equipe comercial: ${leadData.salesTeamSize || 'N√£o informado'}
    - Estrat√©gia de aquisi√ß√£o: ${leadData.clientAcquisitionStrategy || 'N√£o informado'}
    - Usa CRM: ${leadData.usesCRM || 'N√£o informado'}
    - Usa automa√ß√µes: ${leadData.usesAutomation || 'N√£o informado'}
    - Desafio principal: ${leadData.mainChallenge}
    - Objetivo de melhoria: ${leadData.improvementGoal}
    
    ## SERVI√áOS DISPON√çVEIS:
    ${formattedServices}
    
    ## INSTRU√á√ïES:
    Analise os dados do lead e recomende os 3 servi√ßos mais adequados para resolver seus desafios e atingir seus objetivos.
    
    Para cada servi√ßo recomendado, forne√ßa:
    1. O nome exato do servi√ßo (como aparece na lista acima)
    2. Uma descri√ß√£o personalizada do problema que este servi√ßo resolver√° especificamente para este lead (2-3 frases)
    3. Uma descri√ß√£o personalizada do impacto deste problema nos resultados da empresa (2-3 frases)
    4. Tr√™s benef√≠cios personalizados e quantificados sempre que poss√≠vel
    5. Uma prioridade de implementa√ß√£o (1=alta, 2=m√©dia, 3=baixa)
    
    ## FORMATO DA RESPOSTA:
    Sua resposta deve ser um objeto JSON v√°lido com esta estrutura:
    {
      "recommendations": [
        {
          "serviceName": "Nome do Servi√ßo",
          "problemDescription": "Descri√ß√£o personalizada do problema",
          "impactDescription": "Descri√ß√£o personalizada do impacto",
          "benefits": ["Benef√≠cio 1", "Benef√≠cio 2", "Benef√≠cio 3"],
          "priority": 1
        },
        ...outros servi√ßos...
      ]
    }
    
    Retorne APENAS o JSON v√°lido, sem coment√°rios adicionais.
    `;
    
    // Chama o modelo e solicita formato JSON
    console.log("üìù Enviando prompt para o Gemini...");
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
    });
    
    const response = result.response;
    const text = response.text();
    console.log("‚úÖ Resposta recebida do Gemini");
    
    // Processa a resposta - extrai e parse o JSON
    try {
      // Tenta fazer o parse direto primeiro
      return JSON.parse(text);
    } catch (error) {
      console.log("‚ö†Ô∏è Erro ao fazer parse direto, tentando extrair JSON do texto...");
      
      // Se falhar, tenta extrair o JSON de dentro do texto
      const jsonRegex = /{[\s\S]*}/;
      const match = text.match(jsonRegex);
      
      if (match) {
        return JSON.parse(match[0]);
      } else {
        throw new Error("N√£o foi poss√≠vel extrair JSON v√°lido da resposta");
      }
    }
  } catch (error) {
    console.error("‚ùå Erro ao gerar recomenda√ß√µes com Gemini:", error);
    throw error;
  }
}

// Fun√ß√£o para gerar uma an√°lise de contexto para o relat√≥rio
export async function generateContextAnalysis(leadData: any) {
  try {
    const model = getModel();
    
    const prompt = `
    Voc√™ √© um consultor especialista em automa√ß√£o para marketing e vendas. Gere uma an√°lise de contexto para um relat√≥rio de mini-auditoria para esta empresa espec√≠fica.
    
    ## DADOS DA EMPRESA:
    - Nome: ${leadData.companyName}
    - Contato: ${leadData.name} (${leadData.jobTitle || 'N√£o informado'})
    - Site: ${leadData.companySite || 'N√£o informado'}
    - Tamanho da empresa: ${leadData.companySize}
    - Estrutura de marketing: ${leadData.marketingStructure || 'N√£o informado'}
    - Tamanho da equipe comercial: ${leadData.salesTeamSize || 'N√£o informado'}
    - Estrat√©gia de aquisi√ß√£o: ${leadData.clientAcquisitionStrategy || 'N√£o informado'}
    - Usa CRM: ${leadData.usesCRM || 'N√£o informado'}
    - Usa automa√ß√µes: ${leadData.usesAutomation || 'N√£o informado'}
    - Desafio principal: ${leadData.mainChallenge}
    - Objetivo de melhoria: ${leadData.improvementGoal}
    
    ## INSTRU√á√ïES:
    Gere duas partes distintas para o relat√≥rio:

    1. VIS√ÉO GERAL: Um par√°grafo conciso e direto (3-4 frases) que:
       - Mencione o nome da empresa especificamente
       - Identifique claramente o principal desafio que a empresa enfrenta
       - Conecte esse desafio com o objetivo declarado pela empresa
       - Enfatize o potencial de automa√ß√£o para resolver esses problemas
       - Use um tom profissional e assertivo

    2. AN√ÅLISE DE CONTEXTO: Dois par√°grafos que:
       - Apresente uma an√°lise detalhada da situa√ß√£o atual da empresa
       - Descreva o ambiente operacional da empresa com detalhes espec√≠ficos (tamanho, estrutura, uso de tecnologia)
       - Identifique gargalos e oportunidades baseados nos dados fornecidos
       - Explique como a automa√ß√£o inteligente pode resolver os desafios identificados
       - Relacione as solu√ß√µes aos objetivos de neg√≥cio da empresa
       - Seja espec√≠fico e evite generalidades
    
    ## FORMATO DA RESPOSTA:
    Forne√ßa apenas o texto da an√°lise, sem introdu√ß√µes ou conclus√µes adicionais, no seguinte formato JSON:

    {
      "visaoGeral": "Par√°grafo conciso e direto com 3-4 frases conforme instru√ß√µes...",
      "analiseContexto": "Dois par√°grafos detalhados conforme instru√ß√µes..."
    }

    N√£o inclua nada al√©m do JSON v√°lido.
    `;
    
    console.log("üìù Enviando prompt para an√°lise de contexto ao Gemini...");
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
    });
    
    const response = result.response;
    const text = response.text();
    console.log("‚úÖ An√°lise de contexto recebida do Gemini");
    
    try {
      // Tentar fazer o parse do JSON diretamente
      const jsonResponse = JSON.parse(text);
      return jsonResponse;
    } catch (error) {
      // Se falhar, tentar extrair o JSON do texto
      const jsonRegex = /{[\s\S]*}/;
      const match = text.match(jsonRegex);
      
      if (match) {
        return JSON.parse(match[0]);
      } else {
        // Se ainda falhar, retornar um objeto formatado com o texto bruto
        return {
          visaoGeral: "An√°lise personalizada para identificar oportunidades de automa√ß√£o em processos de marketing e vendas.",
          analiseContexto: text
        };
      }
    }
  } catch (error) {
    console.error("‚ùå Erro ao gerar an√°lise de contexto com Gemini:", error);
    throw error;
  }
}
