import { sanityClient } from './client';
// import { v4 as uuidv4 } from 'uuid'; // Comentando importa√ß√£o n√£o utilizada
import { LeadData, ReportData } from '@/lib/types';
// Import the async generation function directly
import { generateReportAsync } from '@/app/api/reports/generate/route'; 

// const SECRET_TOKEN = process.env.INTERNAL_API_SECRET; // No longer needed here

// Criar um novo lead
export async function createLead(leadData: LeadData) {
  try {
    console.log('üìù Criando lead com dados:', leadData);
    
    // Adicionar timestamp e status inicial do relat√≥rio
    const timestamp = new Date().toISOString();
    const lead = await sanityClient.create({
      _type: 'lead',
      ...leadData,
      createdAt: timestamp,
      updatedAt: timestamp,
      // Inicializar o status do relat√≥rio como "em fila"
      reportStatus: {
        status: 'queued',
        message: 'Relat√≥rio est√° na fila para gera√ß√£o',
        updatedAt: timestamp,
        attempts: 0
      }
    });
    
    console.log('‚úÖ Lead criado com sucesso:', lead._id);
    
    // Iniciar gera√ß√£o ass√≠ncrona do relat√≥rio DIRETAMENTE (sem fetch)
    // Fire-and-forget: We don't await this promise
    generateReportAsync(lead._id).catch(error => {
      // Log errors from the async process, but don't let them crash the lead creation
      console.error(`‚ùå Erro n√£o capturado na chamada direta de generateReportAsync para lead ${lead._id}:`, error);
    });
    console.log(`üîÑ Chamada direta para generateReportAsync iniciada para lead: ${lead._id}`);
    
    // Remover bloco try/catch anterior que fazia o fetch
    
    return lead._id;
  } catch (error) {
    console.error('‚ùå Erro ao criar lead:', error);
    throw error;
  }
}

// Atualizar um lead existente
export async function updateLead(leadId: string, data: Partial<LeadData>) {
  try {
    console.log(`üìù Atualizando lead ${leadId} com dados:`, data);
    const result = await sanityClient
      .patch(leadId)
      .set({
        ...data,
        updatedAt: new Date().toISOString()
      })
      .commit();
      
    console.log('‚úÖ Lead atualizado com sucesso');
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar lead:', error);
    throw error;
  }
}

// Criar um novo relat√≥rio
export async function createReport(reportData: ReportData) {
  try {
    console.log('üìù Criando relat√≥rio com dados:', reportData);
    // Gerar um slug baseado no reportId
    const slug = {
      _type: 'slug',
      current: reportData.reportId
    };
    
    const result = await sanityClient.create({
      _type: 'report',
      ...reportData,
      slug,
      createdAt: new Date().toISOString(),
      views: 0
    });
    
    console.log('‚úÖ Relat√≥rio criado com sucesso:', result._id);
    return {
      id: result._id,
      slug: reportData.reportId
    };
  } catch (error) {
    console.error('‚ùå Erro ao criar relat√≥rio:', error);
    throw error;
  }
}

// Atualizar um relat√≥rio existente
export async function updateReport(reportId: string, data: Partial<ReportData>) {
  try {
    console.log(`üìù Atualizando relat√≥rio ${reportId} com dados:`, data);
    const result = await sanityClient
      .patch(reportId)
      .set(data)
      .commit();
      
    console.log('‚úÖ Relat√≥rio atualizado com sucesso');
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar relat√≥rio:', error);
    throw error;
  }
}

// Registrar visualiza√ß√£o de relat√≥rio
export async function registerReportView(reportId: string) {
  try {
    console.log(`üìù Registrando visualiza√ß√£o para relat√≥rio ${reportId}`);
    const result = await sanityClient
      .patch(reportId)
      .inc({ views: 1 })
      .set({ lastViewedAt: new Date().toISOString() })
      .commit();
      
    console.log('‚úÖ Visualiza√ß√£o registrada com sucesso');
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao registrar visualiza√ß√£o:', error);
    throw error;
  }
}

// Registrar clique no CTA do relat√≥rio
export async function registerReportCTAClick(reportId: string) {
  try {
    console.log(`üìù Registrando clique no CTA para relat√≥rio ${reportId}`);
    const result = await sanityClient
      .patch(reportId)
      .set({ 
        callToActionClicked: true,
        lastViewedAt: new Date().toISOString()
      })
      .inc({views: 1})
      .commit();
      
    console.log('‚úÖ Clique no CTA registrado com sucesso');
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao registrar clique no CTA:', error);
    throw error;
  }
}
